include "String.aes"

contract OracleConnector =

    datatype event = QueryCreated(oracle(string,string), bytes(32), int, string) 
                     | OracleCreated(oracle(string, string), string)

    record state = {
        source_oracle : oracle(string, string),
        reqc : map(address, int),
        index_of_queries: int, // to read number of queries on interval
        map_of_queries: map(int, oracle_query(string,string)), // get new queries to respond to, it can be used as unique id on purpose
        callback_addresses : map(address, bool),
        owners: map(address, bool),
        queries: map(bytes(32), oracle_query(string, string)), // for users to get their queries by unique id
        base_fee: int,
        ttl: int, // for oracle ttl
        qttl: int,
        rttl: int // for query response ttl
     }


    stateful entrypoint init () =
       let oracle_created : oracle(string, string) = createOracle()
       {source_oracle = oracle_created,
            reqc = {},
            index_of_queries = 0,
            map_of_queries = {},
            callback_addresses = {[Call.caller] = true},
            owners = {[Call.caller] = true},
            base_fee = 100000000000000000,
            queries = {},
            ttl = 999999, 
            qttl = 10000,
            rttl = 10000}
         
    stateful entrypoint createOracle() : oracle(string, string) =
        let oracle_created : oracle(string, string) = Oracle.register(Contract.address, 100000000000000000, RelativeTTL(999999))
        Chain.event(OracleCreated(oracle_created, "New oracle created"))
        oracle_created

    payable stateful entrypoint query(args: string) : bytes(32) =
         // require(Address.is_contract(Call.caller), "Only a contract can call it!")
         require(state.base_fee =< Call.value, "insufficient value for qfee") 
         if(Map.lookup(Call.caller, state.reqc) == None)
            put(state{reqc[Call.caller] = 0})
         put(state{reqc[Call.caller] = state.reqc[Call.caller] + 1})
         // Required, so queries can be mapped with unique key
         let uniq_id : bytes(32) = Crypto.sha3(String.concat(String.concat(Address.to_str(Contract.address), Address.to_str(Call.caller)), Int.to_str(state.reqc[Call.caller])))
         let query_created : oracle_query(string, string) = Oracle.query(state.source_oracle, args, state.base_fee, RelativeTTL(state.qttl), RelativeTTL(state.rttl))
         put(state{queries[uniq_id] = query_created})
         put(state{index_of_queries = state.index_of_queries + 1})
         put(state{map_of_queries[state.index_of_queries] = query_created})
         Chain.event(QueryCreated(state.source_oracle, uniq_id, Chain.timestamp, args))
         uniq_id
         
    public entrypoint getIndexOfQueries() : int =
        state.index_of_queries
      
    public entrypoint getQueryByNumber(number: int) : oracle_query(string, string) =
        state.map_of_queries[number]    
    
    public entrypoint getQuestionByQuery(query: oracle_query(string,string)) : string =
        Oracle.get_question(state.source_oracle, query)
    
    stateful entrypoint respond (query_address: oracle_query(string,string), answer: string) : bool =
        require(state.owners[Call.caller] == true, "Only owners can do this transaction")
        Oracle.respond(state.source_oracle, query_address, answer)
        true
    
    stateful entrypoint addCallBackAddress(addr: address) : bool =
        require(state.owners[Call.caller] == true, "Only owners can do this transaction")
        put(state{callback_addresses[addr] = true})
        true

    public entrypoint getAnswer(query_id: bytes(32)) : option(string) =
        Oracle.get_answer(state.source_oracle, Map.lookup_default(query_id, state.queries, oq_7Cegjfke8zaYtVAhch4XswqVnyk1wCp5oUrGibkxvv5FrU9xq))

    public entrypoint getQuery(query_id: bytes(32)) : option(oracle_query(string, string)) =
        Map.lookup(query_id, state.queries)
        


    stateful entrypoint withdrawFunds(send_to: address, amount: int) : bool =
        require(state.owners[Call.caller] == true, "Only owners can do this transaction")
        Chain.spend(send_to, amount)
        true

    // Checks

    public entrypoint getBaseFee() : int =
        state.base_fee

    // Not rquired for now.        
    // stateful entrypoint listOracleId() : list(bytes(32) * oracle(string,string)) =
    //     Map.to_list(state.source_oracle)

    public entrypoint getOracle() : oracle(string, string) =
         state.source_oracle

    public entrypoint canCallBack() : bool =
        if(Map.lookup(Call.origin, state.callback_addresses) == None)
          abort("Only accepted address can send callback")
        state.callback_addresses[Call.origin] == true


    public entrypoint getCurrentContractBalance() : int =
        Contract.balance
    
    // payable public stateful entrypoint acceptAssets() : int =
    //     Contract.balance
    
    public entrypoint contractAddress() : address =
        Contract.address


// > Activate deactivate oracles.
